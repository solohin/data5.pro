<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Elijah Solokhin</title>
        <link>https://data5.pro</link>
        <description>RSS feed for Elijah Solokhin</description>
        <atom:link href="https://data5.pro/rss.xml" rel="self" type="application/rss+xml" />
                    <item>
                <title>SOAP API calls from Google apps script</title>
                <description><![CDATA[<p>SOAP and WSDL components are deprecated in google apps script. So you have to use plain XML.
There is the SOAP 1.1 example code writen in google apps script.</p>

<pre><code>function testSOAP() {
    var method = 'GetWeather';
    var params = {
        CityName: 'SanFrancisco',
        CountryName: 'USA'
    };

    var envelopeNS = XmlService.getNamespace('SOAP', 'http://schemas.xmlsoap.org/soap/envelope/');
    var envelope = XmlService.createElement('Envelope', envelopeNS);
    var body = XmlService.createElement('Body', envelopeNS);
    envelope.addContent(body);
    var action = XmlService.createElement(method);
    body.addContent(action);

    //Now XML is
    //&lt;SOAP:Envelope xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/"&gt;
    //  &lt;SOAP:Body&gt;
    //    &lt;GetWeather /&gt;
    //  &lt;/SOAP:Body&gt;
    //&lt;/SOAP:Envelope&gt;

    //Set params
    for (var key in params) {
        var paramElement = XmlService.createElement(key);
        if (typeof params[key] == 'object') {
            for (var innerKey in params[key]) {
                paramElement.addContent(XmlService.createElement(innerKey).setText(params[key][innerKey]));
            }
        } else {
            paramElement.setText(params[key])
        }
        action.addContent(paramElement);
    }

    //Now XML is
    //&lt;SOAP:Envelope xmlns:SOAP="http://schemas.xmlsoap.org/soap/envelope/"&gt;
    //  &lt;SOAP:Body&gt;
    //    &lt;GetWeather&gt;
    //      &lt;CityName&gt;SanFrancisco&lt;/CityName&gt;
    //      &lt;CountryName&gt;USA&lt;/CountryName&gt;
    //    &lt;/GetWeather&gt;
    //  &lt;/SOAP:Body&gt;
    //&lt;/SOAP:Envelope&gt;

    //Create element
    var document = XmlService.createDocument(envelope);
    var xml = XmlService.getPrettyFormat().format(document);

    //Request options
    var options = {
        "method": "post",
        "payload": xml,
        "contentType": "text/xml; charset=utf-8",
        "headers": {
            "SOAPAction": "http://www.webserviceX.NET/" + method,
        }    
    };

    //Get response
    var responseXml = UrlFetchApp.fetch("http://some/url/api", options).getContentText();
    Logger.log(responseXml);
    var responseDoc = XmlService.parse(responseXml);
    var responseBody = responseDoc.getRootElement().getChild('Body', envelopeNS).getChild(method + 'Response', envelopeNS);

    //Parse response 
    var result = {};
    var children = responseBody.getChildren();
    for (var i = 0; i &lt; children.length; i++) {
        var child = children[i];
        var name = child.getName();
        var value = child.getValue();
        result[name] = value;
    }
    return result;
}
</code></pre>

<p>It is actual at least for google drive spreadsheets and docs.</p>
]]></description>
                <link>https://data5.pro/google-apps-script/2016/10/16/soap-api-calls-from-google-apps-script</link>
                <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
                <guid>https://data5.pro/google-apps-script/2016/10/16/soap-api-calls-from-google-apps-script</guid>
            </item>
                    <item>
                <title>How to create folder in Google Drive from Google Spreadsheets</title>
                <description><![CDATA[<p>Just use this class to create folder in Google Drive. It will create one if child folder with the same name is not exists.</p>

<p>Example use in function <code>testRun()</code>. You can paste it into your Google Spreadsheet scripts.</p>

<pre><code>var settings = {
    rootFolderId: '0B6nU2EHhqW32EHhqW30zZ2xtYzA',
};

function testRun() {
    Logger.log(DriveManager.createFolderIfNotExists(settings.rootFolderId, 'Temp name 1'));
    Logger.log(DriveManager.createFolderIfNotExists(settings.rootFolderId, 'Temp name 2'));
    Logger.log(DriveManager.createFolderIfNotExists(settings.rootFolderId, 'Temp name 1'));
}

/*
 * Class for working with Google Drive folder
 * (c) Solokhin Ilia
 * solohin.i@gmail.com
 * http://data5.pro
 * https://www.upwork.com/freelancers/~0110e79b44736be7ab
 */
var DriveManager = function () {
    var module = {
        createFolderIfNotExists: function (parentIdOrFolder, newFolderName) {
            return module.createFolder(parentIdOrFolder, newFolderName, true);
        },
        createFolder: function (parentIdOrFolder, newFolderName, onlyIfNotExists) {
            if (onlyIfNotExists === undefined) {
                onlyIfNotExists = true;
            }

            var parent = module.getFolder(parentIdOrFolder);
            if (onlyIfNotExists &amp;&amp; module.isFolderExists(settings.rootFolderId, newFolderName)) {
                Logger.log('Folder %s exists!', newFolderName);
                return false;
            }

            var newFolder = DriveApp.createFolder(newFolderName);
            parent.addFolder(newFolder);

            return newFolder;
        },
        isFolderExists: function (parentIdOrFolder, searchFolderName) {
            var parent = module.getFolder(parentIdOrFolder);
            var children = parent.getFoldersByName(searchFolderName);
            return children.hasNext();
        },
        getFolder: function (parentIdOrFolder, throwException) {
            if (throwException === undefined) {
                throwException = true;
            }

            //In case if we have ID instead of Folder object
            if (typeof parentIdOrFolder == 'string') {
                parentIdOrFolder = DriveApp.getFolderById(parentIdOrFolder);
            }
            //Check if it is Folder
            if (!parentIdOrFolder || typeof parentIdOrFolder.getFiles != 'function' &amp;&amp; throwException) {
                throw ("Wrong parent folder ID or not a folder object " + parentIdOrFolder);
            }
            return parentIdOrFolder;
        }
    };

    return {
        createFolderIfNotExists: module.createFolderIfNotExists,
        isFolderExists: module.isFolderExists,
    };
}();
</code></pre>
]]></description>
                <link>https://data5.pro/google-apps-script/2016/10/17/how-to-create-folder-in-google-drive-from-google-spreadsheets</link>
                <pubDate>Mon, 17 Oct 2016 00:00:00 +0000</pubDate>
                <guid>https://data5.pro/google-apps-script/2016/10/17/how-to-create-folder-in-google-drive-from-google-spreadsheets</guid>
            </item>
            </channel>
</rss>
